# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

#if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#fi


 #If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias pc='proxychains4 -q'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Visual studio code
# I installed vscode from snap once, then I remove it cuz input problems.
# so I need to redirect code command from /snap/bin/code to /usr/bin/code
alias code=/usr/bin/code


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

##### By Chen Zhiyuan #####
# escape --> backquote
# backquote --> escape
# caps lock --> ctrl
# ctrl --> None
if xmodmap -pk | grep -q 'Caps'
then
    setxkbmap -option 'ctrl:swapcaps'
    xmodmap -e "keycode 49 = Escape"
    xmodmap -e "keycode 9 = grave asciitilde"
    xmodmap -e "keycode 37 = "
    xmodmap -e "clear Lock"
fi

#alias ipython=ipython3
#alias python=python3
#alias pip=pip3
set -o vi

export TERM='xterm-256color'
alias quit_smoking=/home/chenzhiyuan/Documents/record_quiting_smoking/main.py
stty stop ""
alias weather="curl wttr.in"

xset -b
alias v=nvim
#source /opt/ros/melodic/setup.bash

git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}



export DOTNET_ROOT=$HOME/dotnet

# bash_prompt
if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold="\[$(tput bold)\]";
    italic="\[$(tput sitm)\]";
    reset="\[$(tput sgr0)\]";
    purple="\[$(tput setaf 5)\]"
    black="\[$(tput setaf 0)\]"
    red="\[$(tput setaf 1)\]"
    green="\[$(tput setaf 2)\]"
    yellow="\[$(tput setaf 3)\]"
    blue="\[$(tput setaf 4)\]"
    magenta="\[$(tput setaf 5)\]"
    cyan="\[$(tput setaf 6)\]"
    white="\[$(tput setaf 7)\]"
    orange="\[$(tput setaf 166)\]"
    gray="\[$(tput setaf 246)\]"
fi;


_sep="${gray} \[•\] ${reset}"
_dir="${orange}\w${reset}"
_host="${italic}${blue}\H${reset}${_sep}";

find_git_branch() {
  # Based on: http://stackoverflow.com/a/13003854/170413
  local branch
  if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
    if [[ "$branch" == "HEAD" ]]; then
      branch='detached*'
    fi
    echo "${green}(${branch})${reset} "
  else
    echo ""
  fi
}

find_git_dirty() {
  local status=$(git status --porcelain 2> /dev/null)
  if [[ "$status" != "" ]]; then
    echo '*'
  else
    echo ''
  fi
}

# Determine active Python virtualenv details.
find_virtualenv() {
    if test -z "$VIRTUAL_ENV" ; then
        echo ""
    else
        echo "$cyan[`basename \"$VIRTUAL_ENV\"`] "
    fi
}

# Highlight the user name when logged in as root.
USER=$(whoami)
if [[ "$USER" == "root" ]]; then
    user="${bold}$red\u${reset}${_sep}";
else
    user="$yellow\u${reset}${_sep}";
fi;

prompt_command() {
    ret_code=$?
    # Are we running in a shell invoked from Vim?
    if [[ "$VIM" ]]; then
        vim="${red}(Vim)${reset} "
    else
        vim=""
    fi

    # Did last command return non-zero value?
    if [ "${ret_code}" != 0 ]; then
        ret_str="${red}❯❯${reset} "
    else
        ret_str="${green}❯${reset} "
    fi

    PS1="\n${user}${_host}${_dir}\n${vim}$(find_virtualenv)$(find_git_branch)${ret_str}"
}

export PROMPT_COMMAND="prompt_command; history -n; history -w; history -c; history -r"
export PS2="${blue}.... ${reset}"
